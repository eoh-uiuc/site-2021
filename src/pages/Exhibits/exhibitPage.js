import React, { useState, useEffect } from "react";
import ExhibitCard from "../../components/ExhibitCard";
import exhibitData from "./exhibitData.js";

const ExhibitPage = (props) => {
  const location = props.location;
  const [data, setData] = useState(null);
  const [selectedTags, setSelectedTags] = useState([]);

  useEffect(() => {
    if (!data) {
      if (location.state) {
        setData(location.state.data);
      } else {
        const building = exhibitData.filter(
          (building) => building.link === location.pathname
        );
        setData(building[0]);
      }
    }
  }, [data, location.state, location.pathname]);

  const setFilter = (tag) => (e) => {
    console.log(location);
    console.log(tag);
    var newExhibits = [];
    var exhib;
    if (tag === "clear") {
      setSelectedTags([]);
      setData(location.state.data);
    } else {
      for (exhib of location.state.data.exhibits) {
        if (exhib.tags.includes(tag)) {
          newExhibits.push(exhib);
        }
      }
      var newData = Object.assign({}, data, { exhibits: newExhibits });
      console.log(newExhibits);
      setData(newData);

      if (selectedTags.indexOf(tag) === -1) {
        setSelectedTags([...selectedTags, tag]);
      }
    }
  };

  if (location.pathname.includes("generative-art")) {
    return <div className="page-container exhibit-page-wrapper">
      <h2 style={{fontSize: 44, letterSpacing: "0.5px", lineHeight: "50px", fontFamily: "Montserrat, sans-serif", fontWeight: 400}}>Art with Processing!</h2>
      <div dangerouslySetInnerHTML={{__html: "<html><head><meta content=\"text/html; charset=UTF-8\" http-equiv=\"content-type\"><style type=\"text/css\">@import url('https://themes.googleusercontent.com/fonts/css?kit=-lTUqgJg2dxbe4D7B5DEIA3jn2WilaVUapNOYl4762s');.lst-kix_6m5em8dje2ek-5>li:before{content:\"-  \"}.lst-kix_5hhtxwj76s06-5>li:before{content:\"-  \"}.lst-kix_sug0a04fx29h-0>li:before{content:\"\\0025cf  \"}.lst-kix_6m5em8dje2ek-4>li:before{content:\"-  \"}.lst-kix_5hhtxwj76s06-4>li:before{content:\"-  \"}.lst-kix_5hhtxwj76s06-6>li:before{content:\"-  \"}.lst-kix_6m5em8dje2ek-3>li:before{content:\"-  \"}.lst-kix_6m5em8dje2ek-6>li:before{content:\"-  \"}.lst-kix_6m5em8dje2ek-7>li:before{content:\"-  \"}.lst-kix_6m5em8dje2ek-1>li:before{content:\"-  \"}.lst-kix_5hhtxwj76s06-1>li:before{content:\"-  \"}.lst-kix_6m5em8dje2ek-8>li:before{content:\"-  \"}.lst-kix_sug0a04fx29h-2>li:before{content:\"\\0025a0  \"}.lst-kix_6m5em8dje2ek-0>li:before{content:\"\\0027a2  \"}.lst-kix_6m5em8dje2ek-2>li:before{content:\"-  \"}.lst-kix_5hhtxwj76s06-0>li:before{content:\"\\0027a2  \"}.lst-kix_5hhtxwj76s06-8>li:before{content:\"-  \"}.lst-kix_sug0a04fx29h-1>li:before{content:\"\\0025cb  \"}.lst-kix_5hhtxwj76s06-7>li:before{content:\"-  \"}.lst-kix_sug0a04fx29h-7>li:before{content:\"\\0025cb  \"}ul.lst-kix_yu1bnn78ymnd-0{list-style-type:none}.lst-kix_sug0a04fx29h-6>li:before{content:\"\\0025cf  \"}.lst-kix_sug0a04fx29h-8>li:before{content:\"\\0025a0  \"}ul.lst-kix_yu1bnn78ymnd-6{list-style-type:none}.lst-kix_sug0a04fx29h-3>li:before{content:\"\\0025cf  \"}ul.lst-kix_yu1bnn78ymnd-5{list-style-type:none}ul.lst-kix_yu1bnn78ymnd-8{list-style-type:none}.lst-kix_sug0a04fx29h-4>li:before{content:\"\\0025cb  \"}ul.lst-kix_yu1bnn78ymnd-7{list-style-type:none}ul.lst-kix_yu1bnn78ymnd-2{list-style-type:none}.lst-kix_sug0a04fx29h-5>li:before{content:\"\\0025a0  \"}ul.lst-kix_yu1bnn78ymnd-1{list-style-type:none}ul.lst-kix_yu1bnn78ymnd-4{list-style-type:none}ul.lst-kix_yu1bnn78ymnd-3{list-style-type:none}ul.lst-kix_scj3ecivzx9i-7{list-style-type:none}ul.lst-kix_scj3ecivzx9i-8{list-style-type:none}ul.lst-kix_scj3ecivzx9i-3{list-style-type:none}ul.lst-kix_scj3ecivzx9i-4{list-style-type:none}ul.lst-kix_scj3ecivzx9i-5{list-style-type:none}ul.lst-kix_scj3ecivzx9i-6{list-style-type:none}ul.lst-kix_scj3ecivzx9i-0{list-style-type:none}ul.lst-kix_scj3ecivzx9i-1{list-style-type:none}ul.lst-kix_scj3ecivzx9i-2{list-style-type:none}ul.lst-kix_u21f5bfomcl-4{list-style-type:none}.lst-kix_eaceimn1pbqv-4>li:before{content:\"\\0025cb  \"}ul.lst-kix_u21f5bfomcl-3{list-style-type:none}ul.lst-kix_u21f5bfomcl-6{list-style-type:none}ul.lst-kix_u21f5bfomcl-5{list-style-type:none}ul.lst-kix_sug0a04fx29h-1{list-style-type:none}ul.lst-kix_u21f5bfomcl-8{list-style-type:none}.lst-kix_s4fvx5mwcsro-8>li:before{content:\"\\0025a0  \"}.lst-kix_eaceimn1pbqv-5>li:before{content:\"\\0025a0  \"}.lst-kix_eaceimn1pbqv-6>li:before{content:\"\\0025cf  \"}ul.lst-kix_sug0a04fx29h-0{list-style-type:none}ul.lst-kix_u21f5bfomcl-7{list-style-type:none}ul.lst-kix_sug0a04fx29h-3{list-style-type:none}ul.lst-kix_sug0a04fx29h-2{list-style-type:none}ul.lst-kix_sug0a04fx29h-5{list-style-type:none}.lst-kix_s4fvx5mwcsro-6>li:before{content:\"\\0025cf  \"}.lst-kix_s4fvx5mwcsro-7>li:before{content:\"\\0025cb  \"}.lst-kix_eaceimn1pbqv-7>li:before{content:\"\\0025cb  \"}.lst-kix_eaceimn1pbqv-8>li:before{content:\"\\0025a0  \"}ul.lst-kix_sug0a04fx29h-4{list-style-type:none}ul.lst-kix_sug0a04fx29h-7{list-style-type:none}.lst-kix_5hhtxwj76s06-2>li:before{content:\"-  \"}ul.lst-kix_sug0a04fx29h-6{list-style-type:none}ul.lst-kix_u21f5bfomcl-0{list-style-type:none}.lst-kix_5hhtxwj76s06-3>li:before{content:\"-  \"}ul.lst-kix_sug0a04fx29h-8{list-style-type:none}ul.lst-kix_u21f5bfomcl-2{list-style-type:none}ul.lst-kix_u21f5bfomcl-1{list-style-type:none}ul.lst-kix_s4fvx5mwcsro-4{list-style-type:none}ul.lst-kix_s4fvx5mwcsro-5{list-style-type:none}.lst-kix_dgul06kuldzm-0>li:before{content:\"\\0027a2  \"}.lst-kix_dgul06kuldzm-1>li:before{content:\"-  \"}ul.lst-kix_s4fvx5mwcsro-6{list-style-type:none}ul.lst-kix_s4fvx5mwcsro-7{list-style-type:none}ul.lst-kix_s4fvx5mwcsro-8{list-style-type:none}.lst-kix_dgul06kuldzm-3>li:before{content:\"-  \"}ul.lst-kix_6m5em8dje2ek-3{list-style-type:none}ul.lst-kix_6m5em8dje2ek-2{list-style-type:none}ul.lst-kix_6m5em8dje2ek-5{list-style-type:none}ul.lst-kix_6m5em8dje2ek-4{list-style-type:none}ul.lst-kix_s4fvx5mwcsro-0{list-style-type:none}ul.lst-kix_s4fvx5mwcsro-1{list-style-type:none}.lst-kix_dgul06kuldzm-2>li:before{content:\"-  \"}ul.lst-kix_s4fvx5mwcsro-2{list-style-type:none}ul.lst-kix_6m5em8dje2ek-1{list-style-type:none}ul.lst-kix_s4fvx5mwcsro-3{list-style-type:none}ul.lst-kix_6m5em8dje2ek-0{list-style-type:none}.lst-kix_dgul06kuldzm-8>li:before{content:\"-  \"}ul.lst-kix_6m5em8dje2ek-7{list-style-type:none}ul.lst-kix_6m5em8dje2ek-6{list-style-type:none}.lst-kix_dgul06kuldzm-7>li:before{content:\"-  \"}ul.lst-kix_6m5em8dje2ek-8{list-style-type:none}.lst-kix_dgul06kuldzm-4>li:before{content:\"-  \"}.lst-kix_dgul06kuldzm-5>li:before{content:\"-  \"}.lst-kix_dgul06kuldzm-6>li:before{content:\"-  \"}ul.lst-kix_5hhtxwj76s06-5{list-style-type:none}ul.lst-kix_5hhtxwj76s06-6{list-style-type:none}ul.lst-kix_5hhtxwj76s06-3{list-style-type:none}ul.lst-kix_5hhtxwj76s06-4{list-style-type:none}ul.lst-kix_5hhtxwj76s06-7{list-style-type:none}ul.lst-kix_5hhtxwj76s06-8{list-style-type:none}ul.lst-kix_5hhtxwj76s06-1{list-style-type:none}ul.lst-kix_5hhtxwj76s06-2{list-style-type:none}ul.lst-kix_5hhtxwj76s06-0{list-style-type:none}.lst-kix_u21f5bfomcl-7>li:before{content:\"\\0025cb  \"}ul.lst-kix_dgul06kuldzm-3{list-style-type:none}ul.lst-kix_dgul06kuldzm-2{list-style-type:none}.lst-kix_u21f5bfomcl-6>li:before{content:\"\\0025cf  \"}.lst-kix_u21f5bfomcl-8>li:before{content:\"\\0025a0  \"}ul.lst-kix_dgul06kuldzm-1{list-style-type:none}ul.lst-kix_dgul06kuldzm-0{list-style-type:none}.lst-kix_yu1bnn78ymnd-7>li:before{content:\"\\0025cb  \"}.lst-kix_u21f5bfomcl-5>li:before{content:\"\\0025a0  \"}.lst-kix_yu1bnn78ymnd-6>li:before{content:\"\\0025cf  \"}.lst-kix_yu1bnn78ymnd-5>li:before{content:\"\\0025a0  \"}.lst-kix_u21f5bfomcl-3>li:before{content:\"\\0025cf  \"}.lst-kix_u21f5bfomcl-4>li:before{content:\"\\0025cb  \"}ul.lst-kix_dgul06kuldzm-8{list-style-type:none}ul.lst-kix_dgul06kuldzm-7{list-style-type:none}ul.lst-kix_dgul06kuldzm-6{list-style-type:none}.lst-kix_yu1bnn78ymnd-4>li:before{content:\"\\0025cb  \"}ul.lst-kix_dgul06kuldzm-5{list-style-type:none}ul.lst-kix_dgul06kuldzm-4{list-style-type:none}ul.lst-kix_2qo3vet078ug-1{list-style-type:none}ul.lst-kix_2qo3vet078ug-0{list-style-type:none}.lst-kix_u21f5bfomcl-0>li:before{content:\"\\0025cf  \"}ul.lst-kix_2qo3vet078ug-3{list-style-type:none}ul.lst-kix_2qo3vet078ug-2{list-style-type:none}ul.lst-kix_2qo3vet078ug-5{list-style-type:none}ul.lst-kix_2qo3vet078ug-4{list-style-type:none}.lst-kix_u21f5bfomcl-1>li:before{content:\"\\0025cb  \"}.lst-kix_u21f5bfomcl-2>li:before{content:\"\\0025a0  \"}ul.lst-kix_2qo3vet078ug-7{list-style-type:none}ul.lst-kix_2qo3vet078ug-6{list-style-type:none}ul.lst-kix_2qo3vet078ug-8{list-style-type:none}.lst-kix_yu1bnn78ymnd-8>li:before{content:\"\\0025a0  \"}.lst-kix_2qo3vet078ug-5>li:before{content:\"-  \"}.lst-kix_scj3ecivzx9i-1>li:before{content:\"\\0025cb  \"}.lst-kix_2qo3vet078ug-3>li:before{content:\"-  \"}.lst-kix_2qo3vet078ug-7>li:before{content:\"-  \"}.lst-kix_scj3ecivzx9i-0>li:before{content:\"\\0025cf  \"}.lst-kix_2qo3vet078ug-4>li:before{content:\"-  \"}.lst-kix_2qo3vet078ug-8>li:before{content:\"-  \"}.lst-kix_scj3ecivzx9i-3>li:before{content:\"\\0025cf  \"}.lst-kix_scj3ecivzx9i-2>li:before{content:\"\\0025a0  \"}.lst-kix_2qo3vet078ug-6>li:before{content:\"-  \"}.lst-kix_scj3ecivzx9i-7>li:before{content:\"\\0025cb  \"}.lst-kix_scj3ecivzx9i-5>li:before{content:\"\\0025a0  \"}.lst-kix_scj3ecivzx9i-4>li:before{content:\"\\0025cb  \"}.lst-kix_scj3ecivzx9i-8>li:before{content:\"\\0025a0  \"}.lst-kix_2qo3vet078ug-0>li:before{content:\"\\0027a2  \"}.lst-kix_2qo3vet078ug-1>li:before{content:\"-  \"}.lst-kix_scj3ecivzx9i-6>li:before{content:\"\\0025cf  \"}.lst-kix_2qo3vet078ug-2>li:before{content:\"-  \"}ul.lst-kix_eaceimn1pbqv-6{list-style-type:none}.lst-kix_s4fvx5mwcsro-2>li:before{content:\"\\0025a0  \"}.lst-kix_s4fvx5mwcsro-3>li:before{content:\"\\0025cf  \"}ul.lst-kix_eaceimn1pbqv-5{list-style-type:none}ul.lst-kix_eaceimn1pbqv-8{list-style-type:none}ul.lst-kix_eaceimn1pbqv-7{list-style-type:none}.lst-kix_s4fvx5mwcsro-0>li:before{content:\"\\0025cf  \"}.lst-kix_s4fvx5mwcsro-1>li:before{content:\"\\0025cb  \"}.lst-kix_s4fvx5mwcsro-4>li:before{content:\"\\0025cb  \"}.lst-kix_s4fvx5mwcsro-5>li:before{content:\"\\0025a0  \"}.lst-kix_eaceimn1pbqv-3>li:before{content:\"\\0025cf  \"}.lst-kix_eaceimn1pbqv-1>li:before{content:\"\\0025cb  \"}.lst-kix_eaceimn1pbqv-2>li:before{content:\"\\0025a0  \"}.lst-kix_eaceimn1pbqv-0>li:before{content:\"\\0025cf  \"}li.li-bullet-0:before{margin-left:-18pt;white-space:nowrap;display:inline-block;min-width:18pt}.lst-kix_yu1bnn78ymnd-1>li:before{content:\"\\0025cb  \"}.lst-kix_yu1bnn78ymnd-3>li:before{content:\"\\0025cf  \"}.lst-kix_yu1bnn78ymnd-2>li:before{content:\"\\0025a0  \"}ul.lst-kix_eaceimn1pbqv-0{list-style-type:none}ul.lst-kix_eaceimn1pbqv-2{list-style-type:none}ul.lst-kix_eaceimn1pbqv-1{list-style-type:none}.lst-kix_yu1bnn78ymnd-0>li:before{content:\"\\0025cf  \"}ul.lst-kix_eaceimn1pbqv-4{list-style-type:none}ul.lst-kix_eaceimn1pbqv-3{list-style-type:none}ol{margin:0;padding:0}table td,table th{padding:0}.c19{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#ffffff;border-top-width:0pt;border-right-width:0pt;border-left-color:#ffffff;vertical-align:top;border-right-color:#ffffff;border-left-width:0pt;border-top-style:solid;border-left-style:solid;border-bottom-width:0pt;width:234pt;border-top-color:#ffffff;border-bottom-style:solid}.c5{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:12pt;font-family:\"Montserrat\";font-style:normal}.c1{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:center;height:12pt}.c2{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:12pt;font-family:\"Courier New\";font-style:normal}.c0{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left;height:12pt}.c3{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c25{padding-top:12pt;padding-bottom:12pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c8{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:center}.c18{color:#ff0000;text-decoration:none;vertical-align:baseline;font-size:12pt;font-style:normal}.c7{color:#000000;text-decoration:none;vertical-align:baseline;font-size:12pt;font-style:normal}.c15{color:#000000;text-decoration:none;vertical-align:baseline;font-size:14pt;font-style:normal}.c16{color:#000000;text-decoration:none;vertical-align:baseline;font-size:18pt;font-style:normal}.c27{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.c9{-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline;text-decoration-skip-ink:none}.c24{border-spacing:0;border-collapse:collapse;margin-right:auto}.c11{padding-top:0pt;padding-bottom:0pt;line-height:1.15;text-align:left}.c31{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c14{margin-left:36pt;padding-left:0pt}.c13{padding:0;margin:0}.c23{color:inherit;text-decoration:inherit}.c4{font-weight:700;font-family:\"Montserrat\"}.c12{font-weight:400;font-family:\"Courier New\"}.c6{font-weight:400;font-family:\"Montserrat\"}.c26{font-weight:400;font-family:\"Times New Roman\"}.c17{font-size:14pt}.c20{color:#ff0000}.c22{height:0pt}.c29{color:#38761d}.c10{color:#0000ff}.c30{font-style:italic}.c21{height:12pt}.c28{text-indent:36pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:\"Times New Roman\";line-height:2.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:\"Arial\";line-height:2.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:12pt;font-family:\"Times New Roman\"}p{margin:0;color:#000000;font-size:12pt;font-family:\"Times New Roman\"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:\"Times New Roman\";line-height:2.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:\"Times New Roman\";line-height:2.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:\"Times New Roman\";line-height:2.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:\"Times New Roman\";line-height:2.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Times New Roman\";line-height:2.0;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Times New Roman\";line-height:2.0;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left}</style></head><body class=\"c31\"><p class=\"c3\"><span class=\"c5\">What do these images have in common?</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c8\"><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 100.00px; height: 100.00px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image4.jpg\" style=\"width: 100.00px; height: 100.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span><span>&nbsp;</span><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 131.80px; height: 100.93px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image2.jpg\" style=\"width: 131.80px; height: 100.93px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 131.50px; height: 98.21px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image8.png\" style=\"width: 131.50px; height: 98.21px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span></p><p class=\"c25\"><span class=\"c6\">The answer is that they were made </span><span class=\"c4\">by a computer</span><span class=\"c6\">! This type of image is called </span><span class=\"c4\">computer-generated art</span><span class=\"c6\">. In this exhibit, we&rsquo;ll be talking about a simple coding language called </span><span class=\"c4\">Processing</span><span class=\"c6\">&nbsp;that you can use to make art like this! We&rsquo;re going to explain everything from scratch, so anyone -</span><span class=\"c4\">&nbsp;</span><span class=\"c4 c20\">even if you don&rsquo;t have any coding experience</span><span class=\"c6 c20\">&nbsp;</span><span class=\"c5\">- can sit down and make something cool. The designs we&rsquo;ll make today all require 50 lines of code or less.</span></p><p class=\"c25 c21\"><span class=\"c5\"></span></p><p class=\"c25\"><span class=\"c4 c16\">Section 1: Introduction</span></p><p class=\"c3\"><span class=\"c15 c4\">Section 1.1: Where to Download</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">Firstly, you might be wondering&hellip; where do I start? Processing (and most other coding languages) requires a </span><span class=\"c4\">code editor</span><span class=\"c5\">&nbsp;- a special kind of text editor (like Microsoft Word or Google Docs) that highlights special keywords and lets us run our program.</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">The easiest way to start is by using an </span><span class=\"c4\">online code editor</span><span class=\"c6\">, at </span><span class=\"c9 c6\"><a class=\"c23\" href=\"https://www.google.com/url?q=https://openprocessing.org/&amp;sa=D&amp;source=editors&amp;ust=1616719479310000&amp;usg=AOvVaw2YZU8AcLG-vtUuzs-HPS7u\">openprocessing.org</a></span><span class=\"c6\">. From here, click the red &ldquo;</span><span class=\"c4 c20\">Create a Sketch</span><span class=\"c6\">&rdquo; button at the top right of the screen to begin. If you want to save your work at the end, you should also make an account. Another option is to download the app at </span><span class=\"c9 c6\"><a class=\"c23\" href=\"https://www.google.com/url?q=https://processing.org/download/&amp;sa=D&amp;source=editors&amp;ust=1616719479310000&amp;usg=AOvVaw0GQEQskbQl-uhnohlZmzwc\">processing.org/download/</a></span><span class=\"c5\">. </span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Load up a fresh sketch and open it up. It might look something like this on the website:</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c4 c17\">Section 1.2: The Processing Interface</span></p><p class=\"c1\"><span class=\"c6 c18\"></span></p><p class=\"c8\"><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 624.00px; height: 341.33px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image7.png\" style=\"width: 624.00px; height: 341.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">You may notice, there isn&rsquo;t a whole lot there yet, but it&rsquo;s very useful to know how to navigate this blank canvas:</span></p><ul class=\"c13 lst-kix_sug0a04fx29h-0 start\"><li class=\"c3 c14 li-bullet-0\"><span class=\"c5\">The top &ldquo;play button&rdquo; runs the code in the editor. It turns into a reset/stop button once we click it to run.</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c6\">I pulled out the right-side menu by clicking the three vertical dots on the top right. </span><span class=\"c18 c4\">Make sure &ldquo;Pjs&rdquo; is selected for the &ldquo;Mode&rdquo; option!</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c6\">The big white space is the editor where you write your code. The website might give you some started code, but </span><span class=\"c4 c20\">you can delete all that</span><span class=\"c5\">.</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c6\">A </span><span class=\"c4\">console</span><span class=\"c5\">&nbsp;will pop out at the bottom if any errors show up. </span></li></ul><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c15 c4\">Section 1.3: Your First Program</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">Knowing that, in the text editor. Let&rsquo;s make </span><span class=\"c7 c4\">your first program!</span></p><p class=\"c0\"><span class=\"c7 c4\"></span></p><p class=\"c3\"><span class=\"c5\">Firstly, copy this into your editor:</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c2\">void setup() {</span></p><p class=\"c0\"><span class=\"c2\"></span></p><p class=\"c3\"><span class=\"c2\">}</span></p><p class=\"c0\"><span class=\"c2\"></span></p><p class=\"c3\"><span class=\"c2\">void draw() {</span></p><p class=\"c0\"><span class=\"c2\"></span></p><p class=\"c3\"><span class=\"c2\">}</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">Right now, we have two </span><span class=\"c4\">functions</span><span class=\"c6\">: </span><span class=\"c12\">setup()</span><span class=\"c6\">&nbsp;and </span><span class=\"c12\">draw()</span><span class=\"c6\">&nbsp;(Ignore the </span><span class=\"c12\">void</span><span class=\"c6\">&nbsp;for now) Functions are basically an organized set of code that perform a certain task. They take in parameters and return a specific output based on the algorithm within the function. Functions get complicated fast, as they could be used to make custom designs, shapes, practically anything. For now, let&rsquo;s think of functions as </span><span class=\"c4\">blocks of code</span><span class=\"c5\">.</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">Everything inside the two curly braces is part of the function. What&rsquo;s important is that when we </span><span class=\"c4\">call</span><span class=\"c5\">&nbsp;a function, we run all the lines of code inside the function in order.</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">These two aren&rsquo;t just any functions - both of these are </span><span class=\"c4\">special functions</span><span class=\"c5\">&nbsp;that Processing recognizes. </span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">The </span><span class=\"c12\">setup()</span><span class=\"c6\">&nbsp;function runs once and is used to set up the design. The </span><span class=\"c12\">draw()</span><span class=\"c6\">&nbsp;function updates </span><span class=\"c4\">every frame</span><span class=\"c5\">&nbsp;of the design, and contains all the code needed to draw the shapes, the color of the shapes, and essential elements of the design. </span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">Let&rsquo;s take a look at a filled in </span><span class=\"c12\">setup()</span><span class=\"c5\">&nbsp;function:</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c2\">void setup() {</span></p><p class=\"c3\"><span class=\"c2\">&nbsp; size(800, 800)</span></p><p class=\"c3\"><span class=\"c2\">&nbsp; background(255, 255, 255)</span></p><p class=\"c3\"><span class=\"c2\">}</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Let&rsquo;s break down those two lines:</span></p><ul class=\"c13 lst-kix_scj3ecivzx9i-0 start\"><li class=\"c3 c14 li-bullet-0\"><span class=\"c12\">size(800, 800)</span><span class=\"c5\">: Like how you would choose what size canvas to watercolor with, Processing needs to know how large of a canvas you start with. This is up to you! I&rsquo;ve made this canvas 800 by 800. The unit of measurement here is a pixel, which is about 1/96 of an inch, so 800 is a good amount of space.</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c12\">background(255, 255, 255)</span><span class=\"c6\">: Now we need to pick a background color. Sadly, processing won&rsquo;t let us just write the name of a color - we need to encode the color into numbers. The first number is the amount of </span><span class=\"c4 c20\">red</span><span class=\"c6\">, the second is the amount of </span><span class=\"c4 c29\">green</span><span class=\"c6\">, and the third is the amount of </span><span class=\"c4 c10\">blue</span><span class=\"c5\">. The highest value is 255, and 255 of all three means white. The best way to wrap your head around this is to play around with different numbers between 0 and 255 and see what you get!</span></li></ul><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">So we have things set up&hellip; what next? Let&rsquo;s draw something! My favorite shape is a circle so let&rsquo;s draw one of those. Since I like circles so much, I&rsquo;ll draw a big one.</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c2\">void draw() {</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ellipse(400, 400, 800, 800)</span></p><p class=\"c3\"><span class=\"c2\">}</span></p><p class=\"c0\"><span class=\"c2\"></span></p><p class=\"c3\"><span class=\"c5\">When we run that, we should get this:</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c8\"><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 313.63px; height: 289.50px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image9.png\" style=\"width: 313.63px; height: 289.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span></p><p class=\"c0\"><span class=\"c2\"></span></p><p class=\"c3\"><span class=\"c6\">Let&rsquo;s look at that line more closely: Processing prefers the word </span><span class=\"c12\">ellipse</span><span class=\"c6\">&nbsp;over &ldquo;circle&rdquo;, so we can draw either ovals or circles (similarly, there&rsquo;s no word for &ldquo;square&rdquo;, it&rsquo;s just </span><span class=\"c12\">rect</span><span class=\"c6\">, but the side lengths are the same). We give the ellipse </span><span class=\"c4\">coordinates</span><span class=\"c5\">&nbsp;at (400, 400), with a width and height of 800. For circles, the width and height are the same, but they&rsquo;d be different for an oval. </span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">In summary, we have these two commands:</span></p><ul class=\"c13 lst-kix_s4fvx5mwcsro-0 start\"><li class=\"c3 c14 li-bullet-0\"><span class=\"c12\">ellipse(x, y, width, height)</span><span class=\"c5\">: draws an ellipse (a circle when width and height are the same)</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c12\">rect(x, y, width, height)</span><span class=\"c5\">: draws a rectangle (a square when width and height are the same)</span></li></ul><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">This is kinda neat! We drew a circle in the center of the page, with a pretty large radius. Try to make your own ellipses and rectangles at different coordinates and with a different width and height. Hot dog, hot dog, hot diggity dog!</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">To Recap:</span></p><ul class=\"c13 lst-kix_yu1bnn78ymnd-0 start\"><li class=\"c3 c14 li-bullet-0\"><span class=\"c5\">Where you download and/or play with processing</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c5\">Navigating the Processing interface</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c5\">Basic Processing syntax</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c5\">Intro to drawing shapes!</span></li></ul><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Join us in the next section where we talk about how to draw different kinds of shapes and investigate how to organize our code!</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c16 c4\">Section 2: Shapes, Drawing Order, and Loops</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c4 c15\">Section 2.1: The Processing Coordinate System</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Before we start talking about how to draw other shapes, let&rsquo;s chat a bit about the Processing Coordinate System. </span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">As seen in the Responsive Design PDF:</span></p><p class=\"c0\"><span class=\"c5\"></span></p><a id=\"t.0935f0db31ff15d06653abddbb56764f7ce012fb\"></a><a id=\"t.0\"></a><table class=\"c24\"><tbody><tr class=\"c22\"><td class=\"c19\" colspan=\"1\" rowspan=\"1\"><p class=\"c3\"><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 298.00px; height: 213.33px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image3.png\" style=\"width: 298.00px; height: 213.33px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span></p></td><td class=\"c19\" colspan=\"1\" rowspan=\"1\"><p class=\"c11\"><span class=\"c5\">Point (0,0) is at the top left.</span></p><p class=\"c11 c21\"><span class=\"c5\"></span></p><p class=\"c11\"><span class=\"c5\">As you go down the y axis - the y position increases</span></p><p class=\"c11 c21\"><span class=\"c5\"></span></p><p class=\"c11\"><span class=\"c5\">As you go right on the x axis - the x position increases</span></p><p class=\"c11 c21\"><span class=\"c5\"></span></p><p class=\"c11\"><span class=\"c5\">There are no negative values!</span></p></td></tr></tbody></table><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c15 c4\">Section 2.2: More built-in stuff </span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Right now, our shapes are quite uncolorful. Let&rsquo;s fix that!</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">Before we draw a shape with </span><span class=\"c12\">ellipse</span><span class=\"c6\">, </span><span class=\"c12\">rect</span><span class=\"c6\">, or some other command, we can define our </span><span class=\"c4\">stroke</span><span class=\"c6\">&nbsp;and </span><span class=\"c4\">fill</span><span class=\"c6\">. Stroke is the color of the outline of the shape, and fill is the color of the whole inside. Again, we pass in our red, green, and blue quantities to this function. The width of the outline can be set with the </span><span class=\"c12\">strokeWidth</span><span class=\"c5\">&nbsp;command. Putting everything together looks something like this:</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c2\">void draw() {</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeWeight(5)</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stroke(255, 0, 255)</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill(100, 255, 100)</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ellipse(250, 400, 300, 300)</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeWeight(4)</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stroke(255, 0, 0)</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill(0, 200, 200)</span></p><p class=\"c3\"><span class=\"c2\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rect(400, 270, 270, 270)</span></p><p class=\"c3\"><span class=\"c2\">}</span></p><p class=\"c1\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Running this, we get</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c8\"><span class=\"c6\">&nbsp;</span><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 355.40px; height: 321.62px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image5.png\" style=\"width: 355.40px; height: 321.62px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span></p><p class=\"c1\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Much more colorful!</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c15 c4\">Section 2.3: Drawing Other Shapes</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">In the demos below, &nbsp;we won&#39;t just be drawing circles but also rectangles and lines&hellip; so, how do we do that?</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Now that we know the building blocks, let&rsquo;s look at this image from the Responsive Design PDF:</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c8\"><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 624.00px; height: 342.67px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image10.png\" style=\"width: 624.00px; height: 342.67px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span></p><p class=\"c3\"><span class=\"c6\">To draw any of these shapes, we need to pass in values like where to start, where to end, the width, and height of things. For instance, </span><span class=\"c12\">line(50, 50, 100, 100)</span><span class=\"c5\">&nbsp;will draw us a line from (50, 50) to (100, 100). </span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">Following this guide will be the best bet for drawing certain shapes in processing, filling in the parameters with your own values in your design. Once you learn more, you could also design custom shapes using </span><span class=\"c12\">vertex()</span><span class=\"c6\">&nbsp;and </span><span class=\"c12\">curveVertex()</span><span class=\"c5\">&nbsp;but we won&rsquo;t be doing that today.</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Keep in mind that, again, Processing reads your code from top to bottom. So if you have multiple shapes in your design, pay attention where they are in the code if you want them to be drawn in a certain order. For example, if you draw a rectangle on line 8 and a circle on line 9, the circle will be drawn in front of the rectangle. </span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c4 c17\">Section 2.4: Loops</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Say I have this code:</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c2\">ellipse(200, 400, 100, 100)</span></p><p class=\"c3\"><span class=\"c2\">ellipse(300, 400, 100, 100)</span></p><p class=\"c3\"><span class=\"c2\">ellipse(400, 400, 100, 100)</span></p><p class=\"c3\"><span class=\"c2\">ellipse(500, 400, 100, 100)</span></p><p class=\"c3\"><span class=\"c2\">ellipse(600, 400, 100, 100)</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">It&rsquo;s kind of a lot of work to write out </span><span class=\"c12\">ellipse </span><span class=\"c5\">a bunch of times like that. Most coding languages think so too, so let&rsquo;s take a look at the solution: the for-loop.</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c2\">for (int i = 0; i &lt; 5; i++) {</span></p><p class=\"c3 c28\"><span class=\"c2\">ellipse(200 + 100 * i, 400, 100, 100)</span></p><p class=\"c3\"><span class=\"c2\">}</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">Woah, what&rsquo;s going on here? The part inside the parentheses of the first line tells us the following things, separated by semicolons:</span></p><ul class=\"c13 lst-kix_eaceimn1pbqv-0 start\"><li class=\"c3 c14 li-bullet-0\"><span class=\"c12\">int i = 0</span><span class=\"c6\">&nbsp;: We&rsquo;re going to declare a </span><span class=\"c4\">variable</span><span class=\"c6\">&nbsp;called </span><span class=\"c12\">i</span><span class=\"c6\">. We haven&rsquo;t really discussed variables yet, but they&rsquo;re a very important part of most coding languages. They&rsquo;ll let us store the value of a number, in this case 0. We have to tell Processing that our variable is an </span><span class=\"c4\">integer</span><span class=\"c6\">, so we say </span><span class=\"c12\">int</span><span class=\"c6\">. Don&rsquo;t worry about this </span><span class=\"c12\">int</span><span class=\"c5\">&nbsp;thing for now.</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c12\">i++ </span><span class=\"c6\">: Let&rsquo;s skip to the last one here. </span><span class=\"c12\">i++</span><span class=\"c6\">&nbsp;means that every time we reach the end of the curly braces, we&rsquo;re going to raise </span><span class=\"c12\">i</span><span class=\"c6\">&nbsp;by one. So the first time we go through the loop, </span><span class=\"c12\">i</span><span class=\"c6\">&nbsp;is 0. Then, we go again, and everything is the same except </span><span class=\"c12\">i</span><span class=\"c6\">&nbsp;is 1. Then, we go again, but </span><span class=\"c12\">i</span><span class=\"c5\">&nbsp;is 2, and so on.</span></li><li class=\"c3 c14 li-bullet-0\"><span class=\"c12\">i &lt; 5 </span><span class=\"c6\">: This is our stop condition, we&rsquo;ll quit the loop when </span><span class=\"c12\">i</span><span class=\"c5\">&nbsp;is 5.</span></li></ul><p class=\"c3\"><span class=\"c6\">In practice, we often just want to change the </span><span class=\"c12\">5</span><span class=\"c6\">&nbsp;in that expression; this can basically be thought of as &ldquo;repeat this stuff 5 times&rdquo;. Inside the for loop, we can recover those original x coordinates with that </span><span class=\"c12\">200 + 100 * i</span><span class=\"c5\">&nbsp;expression. That&rsquo;s a little complex, so watch the video tutorials for better examples of this.</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c16 c4\">Section 3: Tutorials</span></p><p class=\"c0\"><span class=\"c7 c4\"></span></p><p class=\"c3\"><span class=\"c4 c17\">Tutorial 1 - Random Rectangles</span></p><p class=\"c8\"><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 308.79px; height: 288.50px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image6.png\" style=\"width: 308.79px; height: 288.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">This video will demonstrate how to make some cool rectangle, pop-art like design using what you know in Processing!</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\"><iframe width=\"800px\" height=\"400px\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/eohvids.2/EOH+Rectangles2.mp4\"></iframe></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">Here&rsquo;s a link to the Source Code: </span><span class=\"c9 c6\"><a class=\"c23\" href=\"https://www.google.com/url?q=https://openprocessing.org/sketch/1105421&amp;sa=D&amp;source=editors&amp;ust=1616719479337000&amp;usg=AOvVaw05KytknE4alKG-qveYuXEE\">https://openprocessing.org/sketch/1105421</a></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">And here is the List Color code I mentioned at the end of the video:</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c2\">color[] colorGreenList = {color(3,166,90), color(51,166,101), color(217,179, 108), color(217,217,217), color(38,38,38)};</span></p><p class=\"c3\"><span class=\"c2\">&nbsp; &nbsp; int rand_col = (int)random(colorGreenList.length);</span></p><p class=\"c3\"><span class=\"c2\">&nbsp; &nbsp; fill(colorGreenList[rand_col]);</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c0\"><span class=\"c15 c6\"></span></p><p class=\"c3\"><span class=\"c15 c4\">Tutorial 2 - Mouse Interactive Spirals</span></p><p class=\"c8\"><span style=\"overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 412.61px; height: 344.50px;\"><img alt=\"\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/image1.png\" style=\"width: 412.61px; height: 344.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);\" title=\"\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\">This is a fun one! We&rsquo;ll walk you through how to make these cool spiral designs! Totally beginner friendly too!</span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c5\"><iframe width=\"800px\" height=\"400px\" src=\"https://eoh-efc-exhibit-2021.s3.us-east-2.amazonaws.com/eohvids.2/Spirals2.mp4\"></iframe></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6\">Here is the link to the Source Code: </span><span class=\"c6 c9\"><a class=\"c23\" href=\"https://www.google.com/url?q=https://openprocessing.org/sketch/1141283&amp;sa=D&amp;source=editors&amp;ust=1616719479339000&amp;usg=AOvVaw1q2ZioUXrwC7ZbEx3cO5CY\">https://openprocessing.org/sketch/1141283</a></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c0\"><span class=\"c5\"></span></p><p class=\"c3\"><span class=\"c6 c30\">This text-walkthrough is modeled after the Responsive Design Processing tutorial. If you want more information and detail, as well as more tutorials, here is the PDF: </span><span class=\"c9 c6 c30\"><a class=\"c23\" href=\"https://www.google.com/url?q=http://responsivedesign.de/wp-content/uploads/2016/05/tutorial-04_processing-introduction2.pdf&amp;sa=D&amp;source=editors&amp;ust=1616719479340000&amp;usg=AOvVaw0Ok1rBe5aNC4EhYI89TJAc\">http://responsivedesign.de/wp-content/uploads/2016/05/tutorial-04_processing-introduction2.pdf</a></span></p><p class=\"c0\"><span class=\"c5\"></span></p></body></html>"}}/>
    </div>
  }

  return (
    data && (
      <div className="page-container exhibit-page-wrapper">
        <h2>{data.name}</h2>
        <div>
          <p>{data.description}</p>
        </div>
        <div className="exhibit-divider"></div>
        <div>
          <div class="dropdown">
            <button class="dropbtn">Filter By Tag</button>
            <div class="dropdown-content">
              <button onClick={setFilter("clear")}>Clear Filter</button>
              {data.tags.map((tag) => (
                <button onClick={setFilter(tag)}>{tag}</button>
              ))}
            </div>
          </div>
          <div className="selected-tags-container">
            {selectedTags.map((t) => (
              <div className="filter-tag">{t}</div>
            ))}
          </div>
        </div>
        <div className="exhibit-videos">
          {data.exhibits.map((exhibit) => (
            <ExhibitCard data={exhibit} />
          ))}
        </div>
      </div>
    )
  );
};

export default ExhibitPage;
